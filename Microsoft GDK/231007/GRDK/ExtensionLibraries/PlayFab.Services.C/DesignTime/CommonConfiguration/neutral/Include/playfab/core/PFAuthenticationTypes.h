// Copyright (c) Microsoft Corporation
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#if !defined(__cplusplus)
#error C++11 required
#endif

#pragma once

#include <playfab/core/PFPal.h>

#include <playfab/core/PFTypes.h>

#if HC_PLATFORM == HC_PLATFORM_GDK
#include <XUser.h>
#endif

extern "C"
{

#pragma push_macro("IN")
#undef IN

/// <summary>
/// IdentifiedDeviceType enum.
/// </summary>
enum class PFAuthenticationIdentifiedDeviceType : uint32_t
{
    Unknown,
    XboxOne,
    Scarlett
};

/// <summary>
/// PFAuthenticationUserSettings data model.
/// </summary>
typedef struct PFAuthenticationUserSettings
{
    /// <summary>
    /// Boolean for whether this player is eligible for gathering device info.
    /// </summary>
    bool gatherDeviceInfo;

    /// <summary>
    /// Boolean for whether this player should report OnFocus play-time tracking.
    /// </summary>
    bool gatherFocusInfo;

    /// <summary>
    /// Boolean for whether this player is eligible for ad tracking.
    /// </summary>
    bool needsAttribution;

} PFAuthenticationUserSettings;

/// <summary>
/// PFAuthenticationLoginResult data model.
/// </summary>
typedef struct PFAuthenticationLoginResult
{
    /// <summary>
    /// (Optional) Results for requested info.
    /// </summary>
    _Maybenull_ PFGetPlayerCombinedInfoResultPayload const* infoResultPayload;

    /// <summary>
    /// (Optional) The time of this user's previous login. If there was no previous login, then it's
    /// DateTime.MinValue.
    /// </summary>
    _Maybenull_ time_t const* lastLoginTime;

    /// <summary>
    /// True if the account was newly created on this login.
    /// </summary>
    bool newlyCreated;

    /// <summary>
    /// (Optional) Player's unique PlayFabId.
    /// </summary>
    _Maybenull_ _Null_terminated_ const char* playFabId;

    /// <summary>
    /// (Optional) Settings specific to this user.
    /// </summary>
    _Maybenull_ PFAuthenticationUserSettings const* settingsForUser;

    /// <summary>
    /// (Optional) The experimentation treatments for this user at the time of login.
    /// </summary>
    _Maybenull_ PFTreatmentAssignment const* treatmentAssignment;

} PFAuthenticationLoginResult;

/// <summary>
/// PFAuthenticationLoginWithCustomIDRequest data model. It is highly recommended that developers ensure
/// that it is extremely unlikely that a customer could generate an ID which is already in use by another
/// customer. If this is the first time a user has signed in with the Custom ID and CreateAccount is set
/// to true, a new PlayFab account will be created and linked to the Custom ID. In this case, no email
/// or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked
/// to the Custom ID, an error indicating this will be returned, so that the title can guide the user
/// through creation of a PlayFab account.
/// </summary>
typedef struct PFAuthenticationLoginWithCustomIDRequest
{
    /// <summary>
    /// Automatically create a PlayFab account if one is not currently linked to this ID.
    /// </summary>
    bool createAccount;

    /// <summary>
    /// Custom unique identifier for the user, generated by the title.
    /// </summary>
    _Null_terminated_ const char* customId;

    /// <summary>
    /// (Optional) The optional custom tags associated with the request (e.g. build number, external
    /// trace identifiers, etc.).
    /// </summary>
    _Maybenull_ _Field_size_(customTagsCount) struct PFStringDictionaryEntry const* customTags;

    /// <summary>
    /// Count of customTags
    /// </summary>
    uint32_t customTagsCount;

    /// <summary>
    /// (Optional) Flags for which pieces of info to return for the user.
    /// </summary>
    _Maybenull_ PFGetPlayerCombinedInfoRequestParams const* infoRequestParameters;

    /// <summary>
    /// (Optional) Player secret that is used to verify API request signatures (Enterprise Only).
    /// </summary>
    _Maybenull_ _Null_terminated_ const char* playerSecret;

} PFAuthenticationLoginWithCustomIDRequest;

/// <summary>
/// PFAuthenticationLoginWithOpenIdConnectRequest data model.
/// </summary>
typedef struct PFAuthenticationLoginWithOpenIdConnectRequest
{
    /// <summary>
    /// A name that identifies which configured OpenID Connect provider relationship to use. Maximum
    /// 100 characters.
    /// </summary>
    _Null_terminated_ const char* connectionId;

    /// <summary>
    /// Automatically create a PlayFab account if one is not currently linked to this ID.
    /// </summary>
    bool createAccount;

    /// <summary>
    /// (Optional) The optional custom tags associated with the request (e.g. build number, external
    /// trace identifiers, etc.).
    /// </summary>
    _Maybenull_ _Field_size_(customTagsCount) struct PFStringDictionaryEntry const* customTags;

    /// <summary>
    /// Count of customTags
    /// </summary>
    uint32_t customTagsCount;

    /// <summary>
    /// The JSON Web token (JWT) returned by the identity provider after login. Represented as the id_token
    /// field in the identity provider's response.
    /// </summary>
    _Null_terminated_ const char* idToken;

    /// <summary>
    /// (Optional) Flags for which pieces of info to return for the user.
    /// </summary>
    _Maybenull_ PFGetPlayerCombinedInfoRequestParams const* infoRequestParameters;

    /// <summary>
    /// (Optional) Player secret that is used to verify API request signatures (Enterprise Only).
    /// </summary>
    _Maybenull_ _Null_terminated_ const char* playerSecret;

} PFAuthenticationLoginWithOpenIdConnectRequest;


/// <summary>
/// PFAuthenticationLoginWithXUserRequest data model. If this is the first time a user has signed in with
/// the Xbox Live account and CreateAccount is set to true, a new PlayFab account will be created and
/// linked to the Xbox Live account. In this case, no email or username will be associated with the PlayFab
/// account. Otherwise, if no PlayFab account is linked to the Xbox Live account, an error indicating
/// this will be returned, so that the title can guide the user through creation of a PlayFab account.
/// Request object for PFAuthenticationLoginWithXUserAsync.
/// </summary>
typedef struct PFAuthenticationLoginWithXUserRequest
{
    /// <summary>
    /// Automatically create a PlayFab account if one is not currently linked to this ID.
    /// </summary>
    bool createAccount;

    /// <summary>
    /// (Optional) The optional custom tags associated with the request (e.g. build number, external
    /// trace identifiers, etc.).
    /// </summary>
    _Maybenull_ _Field_size_(customTagsCount) struct PFStringDictionaryEntry const* customTags;

    /// <summary>
    /// Count of customTags
    /// </summary>
    uint32_t customTagsCount;

    /// <summary>
    /// (Optional) Flags for which pieces of info to return for the user.
    /// </summary>
    _Maybenull_ PFGetPlayerCombinedInfoRequestParams const* infoRequestParameters;

    /// <summary>
    /// (Optional) Player secret that is used to verify API request signatures (Enterprise Only).
    /// </summary>
    _Maybenull_ _Null_terminated_ const char* playerSecret;

    /// <summary>
    /// XUserHandle returned from XUserAddAsync or XUserAddByIdWithUiAsync.
    /// </summary>
    XUserHandle user;

} PFAuthenticationLoginWithXUserRequest;


#pragma pop_macro("IN")

}
